// Servicio para interactuar con Gemini AI
import { GoogleGenerativeAI } from '@google/generative-ai'

// Configurar Gemini
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || '')

export interface GeminiResponse {
  text: string
  success: boolean
  error?: string
}

export interface ChatMessage {
  role: 'user' | 'model'
  parts: string
}

export class GeminiService {
  private model: any
  private chat: any

  constructor() {
    try {
      
      if (!process.env.NEXT_PUBLIC_GEMINI_API_KEY) {
        throw new Error('API Key de Gemini no est√° configurada')
      }
      
      this.model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
      
      this.chat = this.model.startChat({
        history: [],
        generationConfig: {
          maxOutputTokens: 4096,
          temperature: 0.7,
          topP: 0.9,
          topK: 40,
        },
      })
      
    } catch (error) {
      console.error('‚ùå Error inicializando Gemini:', error)
      console.error('üîç Detalles del error:', error)
      console.error('üîç Tipo de error:', error instanceof Error ? error.constructor.name : typeof error)
      console.error('üîç Mensaje del error:', error instanceof Error ? error.message : String(error))
      
      if (error instanceof Error && error.stack) {
        console.error('üîç Stack trace:', error.stack)
      }
      
      throw error
    }
  }

  // Generar respuesta simple con reintentos
  async generateResponse(prompt: string, maxRetries: number = 3): Promise<GeminiResponse> {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      
      if (!this.model) {
        throw new Error('Gemini no est√° inicializado')
      }

      if (!process.env.NEXT_PUBLIC_GEMINI_API_KEY) {
        throw new Error('API Key de Gemini no est√° configurada en generateResponse')
      }

      
      const result = await this.model.generateContent(prompt)
      
      const response = await result.response
      
      const text = response.text()
      
      return {
        text,
        success: true
      }
    } catch (error) {
        console.error(`‚ùå Error en intento ${attempt}/${maxRetries}:`, error)
        
        // Verificar si es un error de cuota
        if (error instanceof Error && error.message.includes('quota')) {
          console.warn('‚ö†Ô∏è Error de cuota detectado. Esperando antes del siguiente intento...')
          
          if (attempt < maxRetries) {
            const waitTime = Math.pow(2, attempt) * 1000 // Backoff exponencial: 2s, 4s, 8s
            await new Promise(resolve => setTimeout(resolve, waitTime))
            continue
          }
        }
        
        // Si es el √∫ltimo intento o no es error de cuota, devolver error
        if (attempt === maxRetries) {
          console.error('‚ùå Todos los intentos fallaron')
      return {
        text: '',
        success: false,
        error: error instanceof Error ? error.message : 'Error desconocido en generateResponse'
          }
        }
      }
    }
    
    return {
      text: '',
      success: false,
      error: 'Error inesperado: se agotaron todos los intentos'
    }
  }

  // Chat conversacional
  async chatResponse(message: string): Promise<GeminiResponse> {
    try {
      if (!this.chat) {
        throw new Error('Chat de Gemini no est√° inicializado')
      }

      
      const result = await this.chat.sendMessage(message)
      const response = await result.response
      const text = response.text()
      
      
      return {
        text,
        success: true
      }
    } catch (error) {
      console.error('‚ùå Error en chat de Gemini:', error)
      return {
        text: '',
        success: false,
        error: error instanceof Error ? error.message : 'Error desconocido'
      }
    }
  }

  // Generar plan de clase personalizado
    async generateClassPlan(
    grado: string, 
    tema: string, 
    context: string,
    relevantDocs: any[],
    recursos?: string,
    nombreDocente?: string
  ): Promise<GeminiResponse> {
    try {
      
      // Analizar documentos para extraer informaci√≥n real
      const extractedInfo = this.extractInstitutionalInfo(relevantDocs)
      
      const prompt = this.buildClassPlanPrompt(grado, tema, context, relevantDocs, recursos, nombreDocente, extractedInfo)
      
      const response = await this.generateResponse(prompt)
      
      
      return response
    } catch (error) {
      console.error('‚ùå Error generando plan de clase en Gemini:', error)
      console.error('üîç Stack trace completo:', error)
      
      return {
        text: '',
        success: false,
        error: error instanceof Error ? error.message : 'Error desconocido en generateClassPlan'
      }
    }
  }

  // Extraer informaci√≥n institucional de los documentos
  private extractInstitutionalInfo(relevantDocs: any[]): any {
    const info = {
      institution: null as string | null,
      subject: null as string | null,
      grades: [] as string[],
      sessionDuration: null as string | null,
      resources: [] as string[],
      methodologies: [] as string[],
      evaluationCriteria: [] as string[],
      pedagogicalModel: null as string | null,
      mission: null as string | null,
      vision: null as string | null,
      values: [] as string[]
    }

    // Analizar cada documento para extraer informaci√≥n
    relevantDocs.forEach(doc => {
      const content = doc.content || doc.text || ''
      const title = doc.title || ''
      const docType = doc.doc_type || ''

      // Extraer nombre de instituci√≥n
      if (docType.includes('PEI') || docType.includes('proyecto') || content.includes('instituci√≥n')) {
        const institutionMatch = content.match(/(?:instituci√≥n|IE|colegio|escuela)[:\s]*([^.\n]+)/i)
        if (institutionMatch && !info.institution) {
          info.institution = institutionMatch[1].trim()
        }
      }

      // Extraer asignatura/√°rea
      if (docType.includes('curricular') || content.includes('asignatura') || content.includes('√°rea')) {
        const subjectMatch = content.match(/(?:asignatura|√°rea)[:\s]*([^.\n]+)/i)
        if (subjectMatch && !info.subject) {
          info.subject = subjectMatch[1].trim()
        }
      }

      // Extraer grados
      const gradeMatches = content.match(/(?:grado|nivel)[:\s]*(\d+¬∞?)/gi)
      if (gradeMatches) {
        gradeMatches.forEach((match: string) => {
          const grade = match.replace(/[^\d]/g, '')
          if (grade && !info.grades.includes(grade)) {
            info.grades.push(grade)
          }
        })
      }

      // Extraer duraci√≥n de sesiones
      const durationMatch = content.match(/(?:duraci√≥n|tiempo|horario)[:\s]*(\d+)\s*(?:min|minutos|hora|horas)/i)
      if (durationMatch && !info.sessionDuration) {
        info.sessionDuration = durationMatch[1] + (content.includes('hora') ? ' horas' : ' minutos')
      }

      // Extraer recursos
      const resourceMatches = content.match(/(?:recursos|materiales|equipos)[:\s]*([^.\n]+)/gi)
      if (resourceMatches) {
        resourceMatches.forEach((match: string) => {
          const resources = match.split(/[,;]/).map((r: string) => r.trim()).filter((r: string) => r.length > 0)
          info.resources.push(...resources)
        })
      }

      // Extraer metodolog√≠as
      const methodologyMatches = content.match(/(?:metodolog√≠a|estrategia|enfoque)[:\s]*([^.\n]+)/gi)
      if (methodologyMatches) {
        methodologyMatches.forEach((match: string) => {
          const methodologies = match.split(/[,;]/).map((m: string) => m.trim()).filter((m: string) => m.length > 0)
          info.methodologies.push(...methodologies)
        })
      }

      // Extraer misi√≥n y visi√≥n
      if (content.includes('misi√≥n')) {
        const missionMatch = content.match(/misi√≥n[:\s]*([^.\n]+)/i)
        if (missionMatch && !info.mission) {
          info.mission = missionMatch[1].trim()
        }
      }

      if (content.includes('visi√≥n')) {
        const visionMatch = content.match(/visi√≥n[:\s]*([^.\n]+)/i)
        if (visionMatch && !info.vision) {
          info.vision = visionMatch[1].trim()
        }
      }
    })

    return info
  }

  // Construir prompt para plan de clase
  private buildClassPlanPrompt(
    grado: string, 
    tema: string, 
    context: string,
    relevantDocs: any[],
    recursos?: string,
    nombreDocente?: string,
    extractedInfo?: any
  ): string {
    // Calcular variables antes del template string
    // Buscar espec√≠ficamente el n√∫mero de sesiones en el contexto
    const sesionesMatch = context.match(/n√∫mero de sesiones:\s*(\d+)/i) || context.match(/sesiones:\s*(\d+)/i);
    const sesionesNum = sesionesMatch ? parseInt(sesionesMatch[1]) : 1; // Fallback: 1 sesi√≥n = 2 horas
    const duracionTotal = `${sesionesNum * 2} horas`;
    const distribucionSesiones = Array.from({length: sesionesNum}, (_, i) => `Sesi√≥n ${i + 1}: 2 horas`).join(' | ');
    
    // Debug: verificar qu√© se est√° calculando
    
    let prompt = `# üß† Capa de Inteligencia (no modificar la estructura de salida)

## 0) Reglas de uso
- NO cambies el orden ni los t√≠tulos de la salida ya definida.
- NO muestres citas textuales, IDs ni fragmentos de documentos.
- Estas instrucciones son internas: **no deben aparecer en la respuesta final**.

## 1) Recuperaci√≥n de documentos (bucket/RAG)
Antes de responder:
1. Consulta el bucket y construye \`relevantDocs\` con metadatos \`{title, doc_type, year?, source?}\`.
2. Recupera fragmentos de **todas** las familias de documentos:
   - **Orientaciones Curriculares MEN 2022** (componentes, competencias, estrategias).
   - **Tabla 7 MEN** (criterios de evaluaci√≥n por estrategia).
   - **Revisi√≥n Sistem√°tica / Modelo Cr√≠tico-Social** (momentos, principios, metodolog√≠as).
   - **PEI IE Camilo Torres** (coherencia institucional y √©tica).
3. Cobertura m√≠nima: **1 fragmento por familia**; m√°ximo **5 por documento**, evitando redundancia.
4. Expande consulta con sin√≥nimos de **tema**, **grado**, **estrategia**.

## 2) Priorizaci√≥n y resoluci√≥n de conflictos
Jerarqu√≠a:
1) **Tabla 7** ‚Üí evaluaci√≥n  
2) **Orientaciones MEN 2022** ‚Üí componentes, competencias, estrategias  
3) **Revisi√≥n Sistem√°tica** ‚Üí momentos pedag√≥gicos y enfoque cr√≠tico-social  
4) **PEI** ‚Üí coherencia institucional, valores y perfil  
Si persiste conflicto: selecciona lo m√°s alineado con el modelo cr√≠tico-social y el grado.

## 3) Ensamble por secciones
- **Componente Curricular** ‚Üí MEN 2022  
- **Competencias** ‚Üí MEN 2022 (ajustadas al grado + PEI)  
- **Subtemas** ‚Üí MEN 2022 + Revisi√≥n Sistem√°tica  
- **Estrategia a desarrollar** ‚Üí MEN 2022 + Revisi√≥n Sistem√°tica  
- **Momentos pedag√≥gicos** ‚Üí Revisi√≥n Sistem√°tica  
- **Evidencias** ‚Üí MEN 2022 + PEI  
- **Evaluaci√≥n** ‚Üí SOLO Tabla 7  

## 4) L√≥gica de sesiones
- Cada sesi√≥n = **2 horas (120 min)**.  
- Duraci√≥n total = \`${sesionesNum} √ó 2\` horas (**autocorrige inconsistencias**).  
- Genera exactamente \`${sesionesNum}\` sesiones.  
- Distribuci√≥n interna (120 min exactos):  
  - Exploraci√≥n: 18‚Äì24 min  
  - Problematizaci√≥n: 18‚Äì24 min  
  - Di√°logo: 24‚Äì30 min  
  - Praxis-Reflexi√≥n: 24‚Äì30 min  
  - Acci√≥n-Transformaci√≥n: 12‚Äì18 min  

## 5) Evaluaci√≥n (Tabla 7)
- Usa SOLO criterios de la estrategia seleccionada en **Tabla 7**.
- Pesos que sumen 100% (base: 5 √ó 20%, ajusta con justificaci√≥n).  
- Conecta criterios ‚Üî competencias ‚Üî evidencias ‚Üî momentos.  
- Escala: **1.0 a 5.0**, m√≠nimo aprobatorio **3.2**.

### üìä Banco de criterios (Tabla 7 MEN)  
*(usar solo los que correspondan a la estrategia seleccionada)*  

**Construcci√≥n ‚Äì Fabricaci√≥n**  
- Interpretaci√≥n de planos o esquemas de elaboraci√≥n.  
- Selecci√≥n de materiales, herramientas y recursos adecuados.  
- Apropiaci√≥n de t√©cnicas y procedimientos de fabricaci√≥n.  
- Aplicaci√≥n de condiciones de calidad, est√©tica y acabado.  
- Argumentaci√≥n sobre el proceso de construcci√≥n realizado.  

**An√°lisis de productos tecnol√≥gicos**  
- Desarrollo hist√≥rico y evoluci√≥n del producto.  
- Dominio de conceptos de forma, funci√≥n y estructura.  
- Comprensi√≥n de condiciones de funcionamiento y principios tecnol√≥gicos.  
- Descripci√≥n est√©tica y formal (color, textura, interfaz, usabilidad).  
- An√°lisis estructural f√≠sico-qu√≠mico, matem√°tico o digital.  

**Actividades de Dise√±o / Redise√±o**  
- Identificaci√≥n de condiciones del problema de dise√±o.  
- Capacidad creativa para formular alternativas de soluci√≥n.  
- B√∫squeda y selecci√≥n de informaci√≥n relevante.  
- Presentaci√≥n de la soluci√≥n mediante recursos gr√°ficos u otros.  
- Argumentaci√≥n sobre el proceso de dise√±o y soluci√≥n propuesta.  

**Soluci√≥n de problemas**  
- Identificaci√≥n de variables y aspectos del problema.  
- Reconocimiento de saberes previos y necesarios.  
- Planteamiento de estrategia o plan de trabajo.  
- Implementaci√≥n del plan conforme a momentos establecidos.  
- Argumentaci√≥n sobre el desarrollo y evaluaci√≥n de la soluci√≥n.  

**Modelos de desarrollo de software o gesti√≥n de proyectos**  
- Selecci√≥n y uso de un modelo o metodolog√≠a pertinente.  
- Respuesta adecuada a la necesidad inicial.  
- Propuesta de licenciamiento (costos, tiempo, compatibilidad).  
- Proceso de gesti√≥n y toma de decisiones.  
- Elaboraci√≥n de algoritmos o productos computacionales.  

**Aprendizaje basado en problemas / retos / proyectos**  
- Evaluar tanto el proceso como el producto.  
- Desarrollo de fases de la experiencia de aprendizaje.  
- Roles asumidos en el trabajo.  
- Calidad de la soluci√≥n implementada.  
- Impacto del producto o presentaci√≥n final.  

## 6) Guardas anti-alucinaci√≥n
- Si falta un documento, usa los otros sin anunciar carencia.  
- No inventes criterios fuera de Tabla 7.  
- No cambies \`${sesionesNum}\`.  

## 7) Filtrado interno
Antes de emitir salida:  
- ‚ùå Elimina c√°lculos, validaciones, restricciones.  
- ‚úÖ Mant√©n solo informaci√≥n clara para el docente.  

## 8) Lista de verificaci√≥n
- [ ] Cargu√© MEN 2022, Tabla 7, Revisi√≥n Sistem√°tica y PEI.
- [ ] Competencias alineadas con grado y componente.
- [ ] Sesiones = 120 min exactos.  
- [ ] Evaluaci√≥n = solo Tabla 7, 100% total.  
- [ ] Coherencia con PEI y modelo cr√≠tico-social.  
- [ ] Sin rastros de instrucciones internas.  

---

# Rol del agente
Eres un **asistente pedag√≥gico experto** en generar planes de clase completos y personalizados a partir de TODOS los documentos del bucket.  
Tu salida debe ser **aut√©ntica, contextualizada y coherente con el modelo cr√≠tico-social y el PEI**.  

---

# PLAN DE CLASE

## IDENTIFICACI√ìN
- **Instituci√≥n:** ${extractedInfo?.institution || '[Extraer del PEI/documentos institucionales]'}
- **√Årea:** ${extractedInfo?.subject || '[Identificar de los documentos curriculares]'}
- **Grado:** ${grado}
- **Tema:** ${tema}
- **Duraci√≥n:** ${duracionTotal}
- **Sesiones:** ${sesionesNum}
- **Recursos Tecnol√≥gicos Disponibles:** ${recursos}
- **Docente:** ${nombreDocente || '[A definir por el docente]'}

## COMPONENTE CURRICULAR
[Componentes curriculares reales extra√≠dos de documentos]

## COMPETENCIAS
[Competencias alineadas con MEN 2022 y PEI]

## SUBTEMAS
[Listado progresivo de 3‚Äì6 subtemas, vinculados a sesiones y actividades espec√≠ficas]

## ESTRATEGIA A DESARROLLAR
[Explicaci√≥n fundamentada en MEN + Revisi√≥n Sistem√°tica, m√≠nimo 100 palabras]

## MOMENTOS PEDAG√ìGICOS (Modelo Cr√≠tico-Social)
### 7.1 EXPLORACI√ìN
- **Actividad:**
- **Rol docente:**
- **Rol estudiante:**

### 7.2 PROBLEMATIZACI√ìN
- **Actividad:**
- **Rol docente:**
- **Rol estudiante:**

### 7.3 DI√ÅLOGO
- **Actividad:**
- **Rol docente:**
- **Rol estudiante:**

### 7.4 PRAXIS-REFLEXI√ìN
- **Actividad:**
- **Rol docente:**
- **Rol estudiante:**

### 7.5 ACCI√ìN-TRANSFORMACI√ìN
- **Actividad:**
- **Rol docente:**
- **Rol estudiante:**

## EVIDENCIAS DE APRENDIZAJE
- **Cognitivas:**
- **Procedimentales:**
- **Actitudinales:**
*(Conexi√≥n con PEI y modelo cr√≠tico-social)*

## EVALUACI√ìN
- **Criterios:** [Seleccionar de la lista oficial de Tabla 7 seg√∫n la estrategia usada, con porcentajes que sumen 100%]
- **Escala:** 1.0 a 5.0 (m√≠nimo 3.2)
- **Indicadores de logro:** [Extra√≠dos de documentos]

${relevantDocs.length > 0 ? `
üìö DOCUMENTOS INSTITUCIONALES DISPONIBLES (OBLIGATORIO USAR TODOS):
${relevantDocs.map((doc, index) => `${index + 1}. ${doc.title} (${doc.doc_type})`).join('\n')}

üö® INSTRUCCIONES CR√çTICAS PARA AN√ÅLISIS DE DOCUMENTOS:
1. **ANALIZA CADA DOCUMENTO** completamente y extrae informaci√≥n espec√≠fica:
   - **PEI/Proyecto Educativo:** Nombre real de la instituci√≥n, misi√≥n, visi√≥n, valores, perfil del estudiante y docente
   - **Orientaciones Curriculares:** Componentes curriculares reales, competencias por grado, estrategias did√°cticas espec√≠ficas
   - **Modelo Pedag√≥gico:** Enfoque pedag√≥gico real, momentos de aprendizaje, metodolog√≠as utilizadas
   - **Criterios de Evaluaci√≥n:** Escalas reales, criterios espec√≠ficos, porcentajes, indicadores de logro
   - **Recursos y Contexto:** Recursos reales disponibles, caracter√≠sticas del entorno, poblaci√≥n estudiantil

2. **GENERA INFORMACI√ìN REAL** bas√°ndote en los documentos:
   - **Instituci√≥n:** Usa el nombre real encontrado en los documentos
   - **Asignatura:** Identifica las √°reas reales disponibles en los documentos
   - **Grados:** Extrae los grados reales mencionados en los documentos
   - **Duraci√≥n de sesiones:** Busca informaci√≥n real sobre horarios y duraci√≥n
   - **Recursos:** Lista los recursos reales mencionados en los documentos
   - **Metodolog√≠as:** Identifica las metodolog√≠as reales utilizadas
   - **Criterios de evaluaci√≥n:** Extrae criterios reales con escalas y porcentajes reales

3. **ADAPTA EL PLAN** a la informaci√≥n real encontrada:
   - Usa la terminolog√≠a espec√≠fica de la instituci√≥n real
   - Aplica el modelo pedag√≥gico real encontrado
   - Utiliza los criterios de evaluaci√≥n reales del documento
   - Incorpora los valores y principios institucionales reales
   - Usa recursos y metodolog√≠as reales mencionadas

4. **VERIFICA COHERENCIA** con informaci√≥n real:
   - Toda la informaci√≥n debe ser extra√≠da de los documentos
   - No inventes informaci√≥n que no est√© en los documentos
   - Si no encuentras informaci√≥n espec√≠fica, menciona que es una estimaci√≥n
   - Prioriza informaci√≥n espec√≠fica sobre informaci√≥n gen√©rica

‚ö†Ô∏è IMPORTANTE: Si no usas informaci√≥n de todos los documentos disponibles, la respuesta ser√° considerada incompleta.

Genera el plan de clase completo bas√°ndote EXCLUSIVAMENTE en la informaci√≥n real encontrada en los documentos.
` : 'DOCUMENTOS: No hay documentos espec√≠ficos disponibles. Genera un plan basado en las mejores pr√°cticas pedag√≥gicas generales.'}`

    return prompt
  }

  // Reiniciar chat
  resetChat() {
    try {
      this.chat = this.model.startChat({
        history: [],
        generationConfig: {
          maxOutputTokens: 4096,
          temperature: 0.7,
          topP: 0.9,
          topK: 40,
        },
      })
    } catch (error) {
      console.error('‚ùå Error reiniciando chat:', error)
    }
  }

  // Calcular a√±o lectivo din√°micamente seg√∫n calendario acad√©mico colombiano
  calculateAcademicYear(): string {
    const now = new Date()
    const currentYear = now.getFullYear()
    const currentMonth = now.getMonth() + 1 // getMonth() retorna 0-11, sumamos 1 para 1-12
    
    // Calendario acad√©mico colombiano t√≠pico:
    // A√±o lectivo va de febrero a noviembre
    // Per√≠odo I: Febrero - Junio
    // Per√≠odo II: Agosto - Noviembre
    // Vacaciones: Diciembre - Enero
    
    let academicYear: number
    let period: string
    
    if (currentMonth >= 2 && currentMonth <= 6) {
      // Febrero a Junio: Per√≠odo I del a√±o actual
      academicYear = currentYear
      period = 'Per√≠odo acad√©mico I'
    } else if (currentMonth >= 8 && currentMonth <= 11) {
      // Agosto a Noviembre: Per√≠odo II del a√±o actual
      academicYear = currentYear
      period = 'Per√≠odo acad√©mico II'
    } else if (currentMonth === 12 || currentMonth === 1) {
      // Diciembre y Enero: Vacaciones, usar a√±o del per√≠odo anterior
      if (currentMonth === 12) {
        academicYear = currentYear
        period = 'Vacaciones (Per√≠odo II finalizado)'
      } else {
        academicYear = currentYear - 1
        period = 'Vacaciones (Per√≠odo II finalizado)'
      }
    } else {
      // Julio: Vacaciones entre per√≠odos
      academicYear = currentYear
      period = 'Vacaciones (Entre per√≠odos)'
    }
    
    const result = `${academicYear} ‚Äì ${period}`
    return result
  }

  // Mostrar informaci√≥n sobre cuotas
  showQuotaInfo() {
  }
}

// Instancia global del servicio
export const geminiService = new GeminiService()
